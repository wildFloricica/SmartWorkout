@page "/"
@using SmartWorkout.Components.Layout
@using SmartWorkout.Context
@using SmartWorkout.DTOs
@using SmartWorkout.Repositories.Interfaces
@using SmartWorkout.Services.Interfaces
@layout NoNav
<PageTitle>Login</PageTitle>
@rendermode InteractiveServer


<style>
	
</style>

<main class="comfy">

<EditForm Model="@loginDto" OnValidSubmit=@TryLogin FormName="trylogin">
	<div class="form-group">
		<label>email:</label>
		<div>
			<InputText @bind-Value="@loginDto.email" class="form-control col-sm-3" />
			<ValidationMessage For="@(() => loginDto.email)" />
		</div>
	</div>
	<div class="form-group">
		<label>password (month+year):</label>
		<div>
			<InputText @bind-Value="@loginDto.password" class="form-control col-sm-3" />
			<ValidationMessage For="@(() => loginDto.password)" />
		</div>
	</div>

	<div class="form-group">
		<input type="submit" class="btn btn-primary" value="Save" />
	</div>
</EditForm>



		<h1> @ErrorMessage</h1>

</main>

@code {
	public bool FailedLogin = false;

	[SupplyParameterFromForm]
	public LoginDto loginDto { get; set; } = new LoginDto();

	[Inject]
	public IAuthorizationService authorizationService { get; set; }
	[Inject]
	private NavigationManager Navigation { get; set; }
	[Inject]
	private IUserRepository _userRepository{ get; set; }
	public string ErrorMessage { get; set; }
	public void TryLogin()
	{
		try
		{
			authorizationService.Login(loginDto);
			var user = _userRepository.GetUserByEmail(loginDto.email);
			if (user.IsTrainer) Navigation.NavigateTo("users", true);
			else Navigation.NavigateTo("/exercise-logs", true);

		}
		catch(Exception e)
		{
			Console.WriteLine(e);
			ErrorMessage = e.Message;
		}
	}

}


